#!/usr/bin/env bash
# TravisCI

if [[ -n $BUILD_DEBUG ]]; then
  set -ex
else
  set -e
fi

if [[ ! $(which docker) ]]; then
  echo "Docker not found. Please install docker."
  exit 1
fi

# set the version file before anything else, because
# we need it in our build env and inside the docker
# containers we'll run some stuff in
if [[ ! -n $PACKAGECLOUD_TOKEN ]]; then
  echo "you must set a PACKAGECLOUD_TOKEN env variable for this to run"
  exit 1
fi

git tag|tail -n 1|tr -d 'v' > VERSION
git rev-parse --short $(git rev-list $(git tag|tail -n 1)|head -n 1) > VERSION_SHA1
git rev-parse --short $(git rev-parse HEAD) > CURRENT_SHA1

if [[ ! -n $CHECKOUT_ROOT ]]; then
  source /code/utils/pkg/includes/common
else
  source $CHECKOUT_ROOT/utils/pkg/includes/common
fi

if [[ $CURRENT_SHA1 != $VERSION_SHA1 ]]; then
  FULL_GIT_VERSION=$(git describe --always --dirty --tags 2>/dev/null)
  GIT_INCREMENT=$(echo $FULL_GIT_VERSION|cut -d'-' -f 2)
  export VERSION="$VERSION".dev."$GIT_INCREMENT"-"$CURRENT_SHA1"
else
  export VERSION=$(cat VERSION)
fi

docker_pull_images () {
  declare -a images=('solarce/trusty-ruby', 'solarce/precise-ruby' \
    'solarce/centos7-ruby', 'ubuntu-upstart:precise', 'ubuntu-upstart:precise' \
    '2k0ri/centos7-systemd')
  echo "## Pulling Docker images for builds and testing ##"

  for image in "${pkg_platforms[@]}"; do
    echo "### Pulling $image ###"
    docker pull $image > /dev/null
  done
}

docker_run () {
  pkgtype="1"
  build_docker_image="1"
  test_docker_image="1"

  for platform in "${pkg_platforms[@]}"; do
    platform_family=$(echo $platform|cut -d':' -f 1)
    platform_release=$(echo $platform|cut -d':' -f 2)

    if [[ $platform_family =~ ubuntu$ ]]; then
      pkgtype="deb"
      pkgarch="amd64"
      export package_cloud_os="ubuntu"
      if [[ $platform_release == "precise" ]]; then
        build_docker_image="solarce/precise-ruby"
        test_docker_image="ubuntu-upstart:precise"
      elif [[ $platform_release == "trusty" ]]; then
        build_docker_image="solarce/trusty-ruby"
        test_docker_image="ubuntu-upstart:trusty"
      fi
    elif [[ $platform_family =~ centos$ ]]; then
      pkgtype="rpm"
      pkgarch="x86_64"
      export package_cloud_os="el"
      if [[ $platform_release == "7" ]]; then
        build_docker_image="solarce/centos7-ruby"
        test_docker_image="2k0ri/centos7-systemd"
      fi
    fi

    if [[ $VERSION =~ dev ]]; then
      export PC_REPO="worker-testing"
    else
      export PC_REPO="worker"
    fi

    if [[ $pkgtype == "rpm" ]]; then
      PC_VERSION=$(echo $VERSION|sed 's/\-/\_/')
    else
      PC_VERSION=$VERSION
    fi

    LATEST_PUBLISHED_QUERY=$(curl -s https://$(echo $PACKAGECLOUD_TOKEN):@packagecloud.io/api/v1/repos/$PC_USER/$PC_REPO/package/$pkgtype/$package_cloud_os/$platform_release/travis-worker/$pkgarch/$PC_VERSION/1.json)

    if [[ -z $LATEST_PUBLISHED_QUERY ]]; then
      echo $($LATEST_PUBLISHED_QUERY|jq .'filename'|tr -d '"')

      if [[ $pkgtype == "rpm" ]]; then
        export LATEST_PUBLISHED_VERSION=$(echo $LATEST_PUBLISHED_FILENAME|cut -d'-' -f 3|sed 's/_/-/')
      else
        export LATEST_PUBLISHED_VERSION=$(echo $LATEST_PUBLISHED_FILENAME|cut -d'_' -f 2)
      fi

      if [[ $VERSION == $LATEST_PUBLISHED_VERSION ]]; then
        if [[ $VERSION =~ dev ]]; then
          package_cloud yank travisci/$PC_REPO/$package_cloud_os/$platform_release $LATEST_PUBLISHED_FILENAME
        else
          echo "Stable version $VERSION has already been published to packagecloud.io"
          echo "Please determine if you want to remove the package and republish it"
          exit 1
        fi
      fi
  fi
    # Run pkg_build inside the appropriate
    # docker container to
    #  - Generate the service script for that distro
    #  - build the package for that distro
    DOCKER_RUN_CMD="docker run"
    if [[ -n $BUILD_DEBUG ]]; then
      export DOCKER_RUN_CMD="$DOCKER_RUN_CMD --env BUILD_DEBUG=true"
    else
      export DOCKER_RUN_CMD
    fi

    $DOCKER_RUN_CMD -i -t \
      --name build-$platform_release-$pkgtype-$DATE \
      --rm=true \
      -v $CHECKOUT_ROOT/:/code \
      -w "/code" \
      $build_docker_image \
      /code/utils/pkg/pkg_build $platform $pkgtype

    # Install and verify the package in the
    # appropriate docker container for each distro
    $DOCKER_RUN_CMD -d --privileged \
      --name test-$platform_release-$pkgtype-$DATE \
      --rm=false \
      -v $CHECKOUT_ROOT/:/code \
      -w "/code" \
      $test_docker_image

    docker exec -it \
      test-$platform_release-$pkgtype-$DATE \
      /code/utils/pkg/pkg_test $platform $pkgtype

    if [[ ! -n $NO_PUSH ]]; then
      package_cloud_push
    else
      echo "NO_PUSH set, so skipping pushing to packagecloud.io"
    fi
    # fin
  done
}

package_cloud_push () {
    # Publish the package to packagecloud.io
    echo "## Publishing package to packagecloud.io ##"

    if [[ $CURRENT_SHA1 != $VERSION_SHA1 ]]; then
      export PC_REPO="worker-testing"
    fi

    PC_UPLOAD_FILE=$(echo $CHECKOUT_ROOT/tmp/output/$pkgtype/$platform_family/$platform_release/*.$pkgtype)
    echo $PC_UPLOAD_FILE

    package_cloud push \
      $PC_USER/$PC_REPO/$package_cloud_os/$platform_release \
      $PC_UPLOAD_FILE --verbose

    # Prune old packages
    cd $CHECKOUT_ROOT/utils/pkg/
    bundle
    if [[ ! -n $PC_LIMIT ]]; then
      export PC_LIMIT=15
    else
      export PC_LIMIT=$PC_LIMIT
    fi
    bundle exec ruby ./packagecloud_prune.rb $PC_REPO $package_cloud_os/$platform_release $PC_LIMIT
}

docker_pull_images

if [[ ! -n $NO_RUN ]]; then
  docker_run
fi
if [[ ! -n $NO_CLEANUP ]]; then
  echo "## Cleaning up tmp/ ##"
  rm -fr tmp/*
fi
